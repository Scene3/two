/---------------------
 -- two_main.bento
 --
 -- Main module of two.bento
 -- Bento support for 2D graphics via HTML5 and WebGL
 --
 -- Copyright (c) 2016 by Michael St. Hippolyte
 --
 --/
 
site three [=

    /------------ GLOBAL ---------------/

    /---- global constants ----/
    
    static int LOG_DEBUG   = 3
    static int LOG_INFO    = 2
    static int LOG_WARNING = 1
    static int LOG_ERROR   = 0


    /---- convenience ----/
    
    static float RADIANS_45_DEG = 0.785398163
    static float RADIANS_90_DEG = 1.570796327
    static float RADIANS_180_DEG = 3.141592654
    

    /---- global data ----/

    global int logging_level(int level) = level

    global set_logging_level(int level) [=
        eval(logging_level(: level :));
        log("two.logging_level set to " + 
            (level == 0 ? "LOG_ERROR" :
            (level == 1 ? "LOG_WARNING" :
            (level == 2 ? "LOG_INFO" :
            (level == 3 ? "LOG_DEBUG" : "unrecognized value (" + level + ")")))));
    =]
      
  
    
    /---- site initialization ----/
    init [=
        info_log("two.init called");
    =]
    
    /------------- SESSION --------------/

   
    /---- session initialization ----/
    
    session_init [=
        info_log("two.session_init called");
    =]


    /----------- OBJECT MODEL -----------/


    display_object [=
        two_class = "PIXI.DisplayObject"

        keep: name = owner.type;

        keep: float x = 0.0
        keep: float y = 0.0
    
        dynamic next_frame [/]
    
        args [/]
        declare [|
            var [= name; =] = new [= two_class; =]([= args; =]);
        |]
      
    
    
        this;
    =]
    
    display_object display_container(display_object[] disp_objs) [=
        two_class = "PIXI.DisplayContainer"

        keep: display_object objs[] = disp_objs

        dynamic next_frame [=
            for display_object o in objs [=
                if (o.next_frame) [=
                    o.next_frame;
                =]
            =]
        =]
   
    =]
    
    display_container sprite [=
        two_class = "PIXI.Sprite"
    
    =]
    
    display_container drawing [=
        two_class = "PIXI.Graphics"
    
    =]
    
    
    /-------------- the stage ------------/
   
    display_container stage(display_object[] stage_objs) [=

        
        scripts[] = []

    =]
    
 
    /---- info/sample page ----/
  
    page(params) two_info(params{}) [=

        /-------------------------/
        /---- meta properties ----/

        title = "two.bento"
        viewport [| width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0 |]

        style [| 
            html, body { 
                width: 100%;
                height: 100%;
                min-width: 100%;
                min-height: 100%;
                margin: 0;
                background: #111111;
            }
        |]

        /---------------------/
        /----  the stage  ----/

        stage sample_stage [=
            display_object[] objs = [
                blue_cube,
                soft_light
            ]
            
            next_frame [=
                blue_cube.rotate(0.002, -0.002, -0.001);
            =]
        =]
      

        /--------------------/
        /---- the canvas ----/
    
        two_component(*) tc(stage s),(params{}) [=
            style  [| position: absolute; top: 0; left: 0;
                      width: 100%; height: 100%; 
                      margin: 0; padding: 0;
                      z-index: 0;
                   |]

            id = "tc"
        =]        

        [|
           <div style="position: absolute; top: 16px; left: 16px;
                       width: 30em; padding: 12px;
                       color: #88FFAA;
                       z-index: 100; background: rgba(255, 255, 255, 0.1)" >
               <h2>two bento</h2>
               <h3>Bento support for WebGL/HTML5 2D graphics</h3>
               <p>
                   two.bento is a library that makes it easy to write server
                   applications that deliver interactive 2D content.
               </p>
           </div>
        |] 
        tc(sample_stage);
    =]
    


    /-- Logging --/
    
    dynamic error_log(str) [=
        if (logging_level >= LOG_ERROR) [=
            log(str);
        =]
    =]
    
    dynamic warning_log(str) [=
        if (logging_level >= LOG_WARNING) [=
            log(str);
        =]
    =]

    dynamic info_log(str) [=
        if (logging_level >= LOG_INFO) [=
            log(str);
        =]
    =]

    dynamic debug_log(str) [=
        if (logging_level >= LOG_DEBUG) [=
            log(str);
        =]
    =]
   
=]
